<?php

use App\Libraries\FirebaseJWTLibrary;
use Laravel\Socialite\Facades\Socialite;

class TokenGeneratorTest extends TestCase
{
    protected $config;
    protected $abstractUser;
    protected $provider;
    protected $token_service;
    protected $jwt_library;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->config = [
            'key' => 'omlettedufromage',
            'exp' => 'week',
            'algo' => 'HS256',
        ];

        $this->abstractUser = Mockery::mock('Laravel\Socialite\Two\User');
        $this->abstractUser->shouldReceive('getId')
            ->andReturn(1)
            ->shouldReceive('getName')
            ->andReturn('florence')
            ->shouldReceive('getEmail')
            ->andReturn('florence@gmail.com');

        $this->provider = Mockery::mock('Laravel\Socialite\Contracts\Provider');
        $this->provider->shouldReceive('userFromToken')->andReturn($this->abstractUser);

        Socialite::shouldReceive('driver')->with('google')->andReturn($this->provider);

        $this->jwt_library = new \App\Libraries\FirebaseJWTLibrary();

        $this->token_service = new \App\Services\TokenGeneratorService($this->jwt_library);
    }

    public function testCannotGenerateTokenIfProviderIsNotSet()
    {
        $this->expectException(\InvalidArgumentException::class);
        $this->token_service->generateToken(['provider' => '']);
    }

    public function testCannotGenerateTokenIfProviderIsNotSupported()
    {
        $this->expectException(\InvalidArgumentException::class);
        $example = ['gogle', 'slck', 'micrsoft', 'unsupported']; //sample unsupported providers
        $this->token_service->generateToken(['provider' => $example[array_rand($example, 1)]]);
    }

    public function testCannotGenerateTokenIfCodeIsNotSet()
    {
        $this->expectException(\InvalidArgumentException::class);
        $this->token_service->generateToken(['provider' => 'google', 'code' => '']);
    }

    public function testCanGenerateTokenIfCodeAndProviderAreSet()
    {
        $token = $this->token_service->generateToken([
            'provider' => 'google',
            'code' => 'ya29.Il-pBx5aS_JhAMwcBo5Ip_cWZ9W19TEYzRKlcLLqZkN4PaFEnrl24y8tXldBR-pPtWxKnwHKa8cpSsuxJXyW2OngfTwVS5G6HKe-KI3pXlP_3C0UdR1XRhYv1ebVwK-fgA',
        ]);

        $this->assertNotEmpty($token);

        $decoded_payload = $this->jwt_library->decode($token);
        $this->assertSame($this->abstractUser->getName(), $decoded_payload->name);
        $this->assertSame($this->abstractUser->getEmail(), $decoded_payload->email);
    }
}
